<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>The Power of a Single-Threaded Event Loop</title>
    <link href="/2023/06/02/3/"/>
    <url>/2023/06/02/3/</url>
    
    <content type="html"><![CDATA[<p>Node.js, an open-source JavaScript runtime environment, leverages a single-threaded event loop to effectively handle concurrent operations. <span id="more"></span><br>This architectural model enables Node.js to scale efficiently, prioritize responsiveness, and optimize resource utilization. </p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Node.js, an open-source JavaScript runtime environment, leverages a single-threaded event loop to effectively handle concurrent operations. This architectural model enables Node.js to scale efficiently, prioritize responsiveness, and optimize resource utilization. In this note, we explore the concept of a single-threaded event loop, its effectiveness in managing concurrency, and the distinction between blocking and non-blocking operations within Node.js. Additionally, we examine the significance of I&#x2F;O operations in computer systems and their role in communication between programs and external resources.</p><h2 id="A-What-is-a-Single-Threaded-Event"><a href="#A-What-is-a-Single-Threaded-Event" class="headerlink" title="A. What is a Single-Threaded Event?"></a>A. What is a Single-Threaded Event?</h2><p>A single-threaded event loop is a programming construct used in event-driven architectures to handle asynchronous operations efficiently within a single thread of execution. It is commonly employed in frameworks and environments that prioritize responsiveness and scalability, such as JavaScript’s Node.js.</p><p>In a single-threaded event loop, there is a central loop that continuously iterates and processes events from an event queue. Events can be various types of asynchronous operations, such as user input, network requests, timers, or file system operations. When an event occurs, it is added to the event queue.</p><p>The event loop follows a specific pattern of execution:</p><ol><li><strong>Event Queue:</strong> Events are added to the event queue as they occur.</li><li><strong>Event Processing:</strong> The event loop continuously checks the event queue for pending events.</li><li><strong>Event Handler:</strong> When an event is encountered, the associated event handler or callback function is executed.</li><li><strong>Blocking and Non-Blocking Operations:</strong> Depending on the type of operation, it can be either blocking or non-blocking. Blocking operations halt the event loop until they complete, while non-blocking operations allow the event loop to continue processing other events.</li><li><strong>Event Completion:</strong> After an event is processed, the loop moves on to the next event in the queue, if any.</li></ol><p>The event loop’s single-threaded nature ensures that each event is processed one at a time in a sequential manner. This eliminates the need for multiple threads and avoids common issues such as race conditions and deadlocks. By efficiently handling I&#x2F;O-bound operations asynchronously, the event loop maximizes resource utilization and responsiveness even in high-traffic scenarios.</p><p>It’s worth noting that while the event loop operates within a single thread, certain tasks, such as computationally intensive operations, can be offloaded to worker threads or external processes to prevent blocking the event loop and maintain overall system performance.</p><h2 id="B-Why-Does-This-Architecture-Handle-Concurrent-Operations-Effectively"><a href="#B-Why-Does-This-Architecture-Handle-Concurrent-Operations-Effectively" class="headerlink" title="B. Why Does This Architecture Handle Concurrent Operations Effectively?"></a>B. Why Does This Architecture Handle Concurrent Operations Effectively?</h2><p>Node.js is based on a single-threaded event loop primarily for the purpose of efficiently handling concurrent operations in an event-driven, non-blocking manner.</p><p>There are several reasons why this architecture model was chosen for Node.js:</p><ol><li><strong>Concurrency Model:</strong> By using a single thread, Node.js can handle a large number of concurrent connections without the need for creating a separate thread for each connection. This makes it highly scalable and memory-efficient compared to traditional thread-based models.</li><li><strong>Event-Driven Programming:</strong> Node.js follows an event-driven programming model, where it listens for events and responds to them asynchronously. The single-threaded event loop allows Node.js to efficiently manage and dispatch events, such as incoming requests or I&#x2F;O operations, without the overhead of thread context switching.</li><li><strong>Non-Blocking I&#x2F;O:</strong> Node.js relies on non-blocking I&#x2F;O operations, which means that when a request is made to read or write data, Node.js doesn’t block the entire thread while waiting for the operation to complete. Instead, it registers a callback function and continues executing other operations. When the I&#x2F;O operation completes, the appropriate callback is invoked. This approach allows Node.js to efficiently handle multiple I&#x2F;O operations concurrently within a single thread.</li><li><strong>Resource Utilization:</strong> Single-threaded event loop architecture optimizes resource utilization by minimizing the overhead associated with creating and managing multiple threads. It avoids the complexities of thread synchronization and locking mechanisms required in multi-threaded environments.</li><li><strong>Simplified Programming Model:</strong> The single-threaded event loop simplifies the programming model for developers. It eliminates the need to deal with explicit thread synchronization and allows for a more straightforward approach to writing asynchronous code using callbacks, promises, or async&#x2F;await syntax.</li></ol><p>However, it’s important to note that while the event loop is single-threaded, Node.js can still utilize multiple threads for certain tasks through worker threads or by delegating heavy computations to external processes. This allows Node.js to take advantage of multi-core systems while still maintaining the benefits of the single-threaded event loop for handling asynchronous I&#x2F;O operations.</p><h2 id="Blocking-Operations-vs-Non-Blocking-Operations"><a href="#Blocking-Operations-vs-Non-Blocking-Operations" class="headerlink" title="Blocking Operations vs. Non-Blocking Operations"></a>Blocking Operations vs. Non-Blocking Operations</h2><p>In Node.js, blocking and non-blocking operations refer to the behavior of certain functions or operations when they are invoked.</p><ol><li><p><strong>Blocking Operations:</strong> Blocking operations are synchronous operations that block the execution of code until they complete. When a blocking operation is called, the Node.js event loop is halted, and the thread remains occupied until the operation finishes. During this time, no other operations can be processed by the event loop. Common examples of blocking operations include file system operations that involve reading or writing data synchronously, synchronous network requests, or computationally intensive tasks.</p></li><li><p><strong>Non-Blocking Operations:</strong> Non-blocking operations, also known as asynchronous operations, allow the execution of code to continue without waiting for the operation to complete. Instead of blocking the event loop, non-blocking operations are initiated, and a callback function or a Promise is provided to handle the result or error when the operation finishes. The event loop can continue processing other events or operations while the non-blocking operation is in progress. Once the operation completes, the associated callback or Promise is triggered. Non-blocking operations are commonly used for I&#x2F;O-related tasks, such as reading files, making network requests, or querying databases.</p></li></ol><p>The use of non-blocking operations is a fundamental aspect of Node.js to ensure high concurrency and responsiveness. By allowing the event loop to continue processing other events while waiting for I&#x2F;O operations to complete, Node.js can efficiently handle a large number of concurrent connections and avoid blocking the execution of code.</p><p>Developers can choose between blocking and non-blocking variants of certain functions in Node.js. For example, the <code>readFileSync</code> function performs a blocking file read operation, while the <code>readFile</code> function provides a non-blocking alternative that takes a callback or returns a Promise to handle the result asynchronously. It is generally recommended to favor non-blocking operations in Node.js applications to maximize performance and scalability.</p><h2 id="What-is-I-x2F-O-Operation"><a href="#What-is-I-x2F-O-Operation" class="headerlink" title="What is I&#x2F;O Operation?"></a>What is I&#x2F;O Operation?</h2><p>I&#x2F;O (Input&#x2F;Output) operations in the context of computer systems refer to the communication between a program and external devices or resources. Input operations involve receiving data or instructions from external sources, while output operations involve sending data or results to external destinations.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Concepts</tag>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is API?</title>
    <link href="/2023/06/01/2/"/>
    <url>/2023/06/01/2/</url>
    
    <content type="html"><![CDATA[<p>This note provides an overview of key concepts related to APIs, HTTP, REST, headers, stateless protocols, CRUD operations, JSON, cacheability, layered systems, and Curl. <span id="more"></span></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><strong>Definition:</strong> API stands for Application Programming Interface. It refers to a set of rules and protocols that allow different software applications to communicate with each other.</li><li><strong>Types of APIs:</strong><ul><li>Framework APIs: APIs provided by frameworks that allow developers to extend and customize the functionality of the framework.</li><li>Package and Library APIs: APIs provided by packages and libraries that solve common problems and provide reusable code.</li><li>Remote APIs: APIs like REST and GraphQL that allow communication with remote servers over a network.</li><li>Web-based APIs: APIs that are accessed through web protocols, typically using HTTP.</li></ul></li></ul><h2 id="HTTP-and-Verbs"><a href="#HTTP-and-Verbs" class="headerlink" title="HTTP and Verbs"></a>HTTP and Verbs</h2><ul><li><strong>HTTP:</strong> HTTP stands for Hypertext Transfer Protocol. It is a protocol that defines the expectations for communication between clients and servers.</li><li><strong>HTTP Verbs:</strong><ul><li>GET: Used to receive information and retrieve data from the server (read operation).</li><li>POST: Used to submit data to the server and receive a response (create operation).</li><li>PUT: Used to update existing data on the server.</li><li>PATCH: Used to partially update existing data on the server.</li><li>DELETE: Used to delete specific resources from the server.</li></ul></li></ul><h2 id="Stateless-Protocol"><a href="#Stateless-Protocol" class="headerlink" title="Stateless Protocol"></a>Stateless Protocol</h2><ul><li><strong>Definition:</strong> A stateless protocol is a type of communication protocol in which each transaction between a client and a server is independent and self-contained. The server does not retain any information about the client’s previous interactions or the current state of the client.</li><li><strong>Advantages:</strong> Stateless protocols are scalable, lightweight, and promote fault tolerance.</li><li><strong>Limitations:</strong> They are not suitable for scenarios that require maintaining a continuous session or context across multiple requests.</li></ul><h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><ul><li><strong>Definition:</strong> Headers are specific sections of data that precede the main content or payload of a message or packet.</li><li><strong>Function:</strong> Headers provide important information and metadata about the message, facilitating its interpretation and processing by the receiving entity.</li><li><strong>Examples:</strong> In the context of HTTP, headers include fields like “Host,” “User-Agent,” and “Content-Type.”</li></ul><h2 id="REST-and-CRUD"><a href="#REST-and-CRUD" class="headerlink" title="REST and CRUD"></a>REST and CRUD</h2><ul><li><strong>REST:</strong> REST stands for Representational State Transfer. It is an architectural style for designing networked applications and APIs.</li><li><strong>CRUD:</strong> CRUD stands for Create, Read, Update, and Delete, which are the basic operations performed on data.</li><li><strong>Relationship:</strong> RESTful APIs map the CRUD operations to appropriate HTTP methods (POST, GET, PUT&#x2F;PATCH, DELETE) to provide a consistent and intuitive interface for interacting with resources.</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li><strong>Definition:</strong> JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is commonly used for structuring data in APIs and exchanging information between a client and a server.</li></ul><h2 id="Layered-System"><a href="#Layered-System" class="headerlink" title="Layered System"></a>Layered System</h2><ul><li><strong>Definition:</strong> A layered system is an architectural style where components are organized in layers, and each layer has specific responsibilities. Communication between layers is well-defined and follows certain protocols.</li></ul><h2 id="Cacheability"><a href="#Cacheability" class="headerlink" title="Cacheability"></a>Cacheability</h2><ul><li><strong>Definition:</strong> Cacheability refers to the capability of storing and reusing previously obtained responses from a server. Caching can improve performance by reducing the need for repeated requests to the server.</li></ul><h2 id="Curl"><a href="#Curl" class="headerlink" title="Curl"></a>Curl</h2><ul><li><strong>Definition:</strong> Curl is a command-line tool and library used for making requests to web servers and transferring data using various protocols such as HTTP, HTTPS, FTP, SMTP, and more.</li><li><strong>Use Cases:</strong> Curl is used for sending HTTP requests, testing APIs, downloading&#x2F;uploading files, scripting and automation, and debugging network connectivity issues.</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Concepts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to Create Content on a Hexo Blog?</title>
    <link href="/2023/05/27/1/"/>
    <url>/2023/05/27/1/</url>
    
    <content type="html"><![CDATA[<p>Some tips on how to use Hexo Blog.This is a really powerful tool to build and maintain your blog!</p><span id="more"></span><h2 id="Commandlines"><a href="#Commandlines" class="headerlink" title="Commandlines:"></a>Commandlines:</h2><ul><li><p><code>$ hexo new (title)</code>: Creates a new post with the specified title. For example, running <code>hexo new a</code> will generate a new post titled “a” in the <code>source/_posts</code> directory.</p></li><li><p>After running the command, navigate to the <code>source/_posts</code> folder, and you will find the newly created file named “a”. You can open this file and write your content in it.</p></li><li><p><code>$ hexo server</code> or <code>$ hexo s</code>: Starts a local server for previewing your website.</p></li><li><p><code>$ hexo new draft (title)</code>: Creates a new draft post with the specified title. Draft posts are not visible when previewing your website online.</p></li><li><p><code>$ hexo server --draft</code>: Starts the local server and allows you to preview your draft posts.</p></li><li><p><code>$ hexo publish b</code>: Publishes a draft post named “b” by moving it from the <code>source/_drafts</code> folder to the <code>source/_posts</code> folder, making it visible in your website preview.</p></li><li><p><code>$ hexo new page c</code>: Creates a new webpage named “c” instead of a post. The webpage is typically generated in the <code>source</code> directory, and you can customize its layout separately.</p></li><li><p><code>$ hexo new d</code>: Creates a new post named “d” by default. If you don’t specify a category, it will be considered a post.</p></li></ul><h2 id="Frontmatter"><a href="#Frontmatter" class="headerlink" title="Frontmatter:"></a>Frontmatter:</h2><p>Frontmatter is metadata located at the beginning of a post or page file. It includes fields such as title, date, tags, and categories. You can modify these fields to customize your post or page content. Additionally, you can use the scaffolds feature to define custom frontmatter templates.</p><h2 id="Tag-Plugins"><a href="#Tag-Plugins" class="headerlink" title="Tag Plugins:"></a>Tag Plugins:</h2><p>Hexo supports various tag plugins that provide additional functionality for content generation. You can refer to the <a href="https://hexo.io/docs/tag-plugins.html">Hexo Tag Plugins documentation</a> for more information on how to use these plugins effectively.</p><h2 id="Codeblock"><a href="#Codeblock" class="headerlink" title="Codeblock:"></a>Codeblock:</h2><p>To include code blocks in your posts, use the <code>&#123;% codeblock %&#125;</code> tag followed by the desired language. Within the code block, you can write your code.</p><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube:"></a>YouTube:</h2><p>You can embed YouTube videos in your posts using the <code>&#123;% youtube %&#125;</code> tag followed by the YouTube video ID.</p><h2 id="Assets-Folders"><a href="#Assets-Folders" class="headerlink" title="Assets Folders:"></a>Assets Folders:</h2><p>To include images in your posts, you can enable the “post asset folder” option in the <code>config.yml</code> file. Then, you can use tags like <code>&#123;% asset_img %&#125;</code> to include images directly, <code>&#123;% asset_link %&#125;</code> to create links to assets, and <code>&#123;% asset_path %&#125;</code> to retrieve the path of an asset.</p><h2 id="Themes"><a href="#Themes" class="headerlink" title="Themes:"></a>Themes:</h2><p>To change the theme of your Hexo website, clone a theme’s GitHub repository and update the <code>theme</code> value in the <code>config.yml</code> file.</p><h2 id="Creating-a-Theme"><a href="#Creating-a-Theme" class="headerlink" title="Creating a Theme:"></a>Creating a Theme:</h2><p>To create a custom theme, navigate to the <code>themes</code> folder and create a new folder for your theme. Inside the theme folder, create four subfolders: <code>languages</code>, <code>layout</code>, <code>scripts</code>, and <code>source</code>. Customize the layout files (<code>layout.ejs</code>, <code>index.ejs</code>, <code>post.ejs</code>, and <code>page.ejs</code>) to control the appearance of your website.</p><h2 id="Partials"><a href="#Partials" class="headerlink" title="Partials:"></a>Partials:</h2><p>To create reusable components, create a <code>partials</code> folder within the <code>layout</code> folder. Inside the <code>partials</code> folder, create individual files for different parts of your site, such as headers, footers, etc. Write the necessary code in these files, and then include them in the layout files using the <code>&lt;%- partial() %&gt;</code> tag.</p><h2 id="Best-Hexo-Tutorials"><a href="#Best-Hexo-Tutorials" class="headerlink" title="Best Hexo Tutorials:"></a>Best Hexo Tutorials:</h2><p>Here is a playlist of the best Hexo tutorials I have found: <a href="https://www.youtube.com/playlist?list=PLLAZ4kZ9dFpOMJR6D25ishrSedvsguVSm">Hexo Tutorial Playlist</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/26/hello-world/"/>
    <url>/2023/05/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a>.<span id="more"></span></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
